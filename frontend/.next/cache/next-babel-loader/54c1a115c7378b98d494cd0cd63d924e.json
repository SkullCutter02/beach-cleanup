{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/beach-cleanup/frontend/pages/subscribedevents.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { UserContext } from \"../context/UserContext\";\n\nconst SubscribedEvents = () => {\n  const userData = useContext(UserContext);\n  const {\n    0: state,\n    1: setState\n  } = useState();\n  useEffect(() => {\n    if (userData !== undefined) {\n      setState(userData.user.hostings);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: \"Subscribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nexport default SubscribedEvents;","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/beach-cleanup/frontend/pages/subscribedevents.js"],"names":["React","useState","useContext","useEffect","Layout","UserContext","SubscribedEvents","userData","state","setState","undefined","user","hostings"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,QAAQ,GAAGL,UAAU,CAACG,WAAD,CAA3B;AACA,QAAM;AAAA,OAACG,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,EAAlC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,QAAQ,KAAKG,SAAjB,EAA4B;AAC1BD,MAAAA,QAAQ,CAACF,QAAQ,CAACI,IAAT,CAAcC,QAAf,CAAR;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAfD;;AAiBA,eAAeN,gBAAf","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\n\nimport Layout from \"../components/Layout\";\nimport { UserContext } from \"../context/UserContext\";\n\nconst SubscribedEvents = () => {\n  const userData = useContext(UserContext);\n  const [state, setState] = useState();\n\n  useEffect(() => {\n    if (userData !== undefined) {\n      setState(userData.user.hostings);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Layout>Subscribe</Layout>\n    </React.Fragment>\n  );\n};\n\nexport default SubscribedEvents;\n"]},"metadata":{},"sourceType":"module"}